#textdomain wesnoth-High_Seas_Era


#define VOID_TERRAINS
Xv,_off^_usr,_s,_f#enddef
#define OBSTRUCTING_TERRAINS
Mm^Xm,Md^Xm,Xu,Xos,*^Xo,{VOID_TERRAINS}#enddef

#define GET_MINMAX_LOCATIONS RADIUS
[store_map_dimensions]
[/store_map_dimensions]
{VARIABLE min_x_for_center 1}
{VARIABLE_OP min_x_for_center add {RADIUS}}
{VARIABLE min_y_for_center 1}
{VARIABLE_OP min_y_for_center add {RADIUS}}
{VARIABLE max_x_for_center $map_size.width}
{VARIABLE_OP max_x_for_center add -{RADIUS}}
{VARIABLE max_y_for_center $map_size.height}
{VARIABLE_OP max_y_for_center add -{RADIUS}}
#enddef

#define GET_XY_FROM_MASK_XY XVAR YVAR INFO_VAR X_ON_MASK Y_ON_MASK
{VARIABLE {XVAR} ${INFO_VAR}.mask_x}
{VARIABLE_OP {XVAR} add {X_ON_MASK}}
{VARIABLE_OP {XVAR} add -1}
{VARIABLE {YVAR} ${INFO_VAR}.mask_y}
{VARIABLE_OP {YVAR} add {Y_ON_MASK}}
{VARIABLE gxyfmxy_evenness_checker ${INFO_VAR}.mask_x}
{VARIABLE_OP gxyfmxy_evenness_checker divide 2}
{VARIABLE_OP gxyfmxy_evenness_checker multiply 2}
{IF_VAR gxyfmxy_evenness_checker equals ${INFO_VAR}.mask_x ([then]
  {VARIABLE gxyfmxy_evenness_checker {X_ON_MASK}}
  {VARIABLE_OP gxyfmxy_evenness_checker divide 2}
  {VARIABLE_OP gxyfmxy_evenness_checker multiply 2}
  {IF_VAR gxyfmxy_evenness_checker not_equals {X_ON_MASK} ([then]
    {VARIABLE_OP {YVAR} add -1}
  [/then])}
[/then]
[else]
  {VARIABLE_OP {YVAR} add -1}
[/else])}
#enddef


#define EXPAND_MAP_TO_SIZE NEW_X_DIM NEW_Y_DIM
[store_map_dimensions]
[/store_map_dimensions]

{VARIABLE new_map_string "usage=map
border_size=1
"}

{VARIABLE new_x_max {NEW_X_DIM}}
{VARIABLE_OP new_x_max add 1}
{VARIABLE new_y_max {NEW_Y_DIM}}
{VARIABLE_OP new_y_max add 1}

{VARIABLE emts_y 0}
[while]
  [variable]
    name=emts_y
    less_than_equal_to=$new_y_max
  [/variable]
  [do]
    {VARIABLE new_map_string "$new_map_string|
"}
    {VARIABLE emts_x 0}
    [while]
      [variable]
        name=emts_x
        less_than_equal_to=$new_x_max
      [/variable]
      [do]
        {IF_VAR emts_x greater_than $map_size.width ([or]
	  [variable]
	    name=emts_y
	    greater_than=$map_size.height
	  [/variable]
	[/or]
	[or]
	  [variable]
	    name=emts_x
	    equals=0
	  [/variable]
	[/or]
	[or]
	  [variable]
	    name=emts_y
	    equals=0
	  [/variable]
	[/or]
	[then]
	  {VARIABLE new_map_string "$new_map_string|_off^_usr"}
	[/then]
	[else]
	  [store_locations]
	    x=$emts_x
	    y=$emts_y
	    variable=this_location
	  [/store_locations]
	  {VARIABLE new_map_string "$new_map_string|$this_location.terrain|"}
	[/else])}
	{IF_VAR emts_x less_than $new_x_max ([then]
	  {VARIABLE new_map_string "$new_map_string|, "}
	[/then])}
	{VARIABLE_OP emts_x add 1}
      [/do]
    [/while]
    {VARIABLE_OP emts_y add 1}
  [/do]
[/while]

[replace_map]
  map=$new_map_string
  expand=yes
[/replace_map]
#enddef


#define GET_OR_CREATE_AREA_FOR_INTERIOR_MAP INTERIOR_SPACE_VAR
{GET_MINMAX_LOCATIONS ${INTERIOR_SPACE_VAR}.radius|}
[store_locations]
  x=$min_x_for_center|-$max_x_for_center
  y=$min_y_for_center|-$max_y_for_center
  [not]
    [not]
      terrain={VOID_TERRAINS}
    [/not]
    [or]
      [filter]
      [/filter]
    [/or]
    radius=${INTERIOR_SPACE_VAR}.radius|
  [/not]
  variable=possible_locations
[/store_locations]

{IF_VAR possible_locations.length equals 0 ([then]
  {VARIABLE interior_map_max_dimensions ${INTERIOR_SPACE_VAR}.radius|}
  {VARIABLE_OP interior_map_max_dimensions multiply 2}
  {VARIABLE_OP interior_map_max_dimensions add 1}

  [store_map_dimensions]
  [/store_map_dimensions]
  {VARIABLE new_map_size_x $map_size.width}
  {VARIABLE new_map_size_y $map_size.height}
  {IF_VAR map_size.width less_than $map_size.height ([then]
    # expand horizontally
    {IF_VAR new_map_size_y less_than $interior_map_max_dimensions ([then]
      {VARIABLE new_map_size_y $interior_map_max_dimensions}
    [/then])}
    {VARIABLE_OP new_map_size_x add $interior_map_max_dimensions}
  [/then]
  [else]
    # expand vertically
    {IF_VAR new_map_size_x less_than $interior_map_max_dimensions ([then]
      {VARIABLE new_map_size_x $interior_map_max_dimensions}
    [/then])}
    {VARIABLE_OP new_map_size_y add $interior_map_max_dimensions}
  [/else])}
  {EXPAND_MAP_TO_SIZE $new_map_size_x $new_map_size_y}

  {GET_MINMAX_LOCATIONS ${INTERIOR_SPACE_VAR}.radius|}
  [store_locations]
    x=$min_x_for_center|-$max_x_for_center
    y=$min_y_for_center|-$max_y_for_center
    [not]
      [not]
        terrain={VOID_TERRAINS}
      [/not]
      radius=${INTERIOR_SPACE_VAR}.radius|
    [/not]
    variable=possible_locations
  [/store_locations]

  {IF_VAR possible_locations.length equals 0 ([then]
    [message]
      speaker=narrator
      message=_"EP's High Seas Era error: Expanded map, but still couldn't find place to put new terrain area."
    [/message]
  [/then])}
[/then])}

{VARIABLE {INTERIOR_SPACE_VAR}.center_x $possible_locations[0].x}
{VARIABLE {INTERIOR_SPACE_VAR}.center_y $possible_locations[0].y}
{VARIABLE {INTERIOR_SPACE_VAR}.mask_x ${INTERIOR_SPACE_VAR}.center_x}
{VARIABLE {INTERIOR_SPACE_VAR}.mask_y ${INTERIOR_SPACE_VAR}.center_y}

{VARIABLE_OP {INTERIOR_SPACE_VAR}.mask_x add -${INTERIOR_SPACE_VAR}.center_x_on_mask}
{VARIABLE_OP {INTERIOR_SPACE_VAR}.mask_y add -${INTERIOR_SPACE_VAR}.center_y_on_mask}
{VARIABLE_OP {INTERIOR_SPACE_VAR}.mask_x add 1}
{VARIABLE_OP {INTERIOR_SPACE_VAR}.mask_y add 1}

{CLEAR_VARIABLE possible_locations}
#enddef


# CAUTION: This assumes that the mask and center locations are already set within the unit's interior space variables.
# It also assumes that you have made sure to allocate a large enough area for ANY modification you make to the unit's interior.
#define ADD_TO_INTERIOR_TERRAIN INTERIOR_SPACE_VAR CONTAINER_ID INTERIOR_MAP_WITH_VOID_BORDER
[terrain_mask]
  x=${INTERIOR_SPACE_VAR}.mask_x
  y=${INTERIOR_SPACE_VAR}.mask_y
  mask={INTERIOR_MAP_WITH_VOID_BORDER}
  [rule]
    new={VOID_TERRAINS}
    use_old=yes
  [/rule]
  # Don't change things that are already non-void. This macro only adds hexes to the interior.
  [rule]
    old={VOID_TERRAINS}
    terrain={PROXY_TERRAIN}
  [/rule]
  [rule]
    use_old=yes
  [/rule]
[/terrain_mask]
[store_locations]
  terrain={PROXY_TERRAIN}
  variable=hexes_in_mask
[/store_locations]
{FOREACH hexes_in_mask atit_i}
  {VARIABLE hex_is_contained_in_unit_$hexes_in_mask[$atit_i|].x|_$hexes_in_mask[$atit_i|].y| true}
  {VARIABLE hex_owner_id_$hexes_in_mask[$atit_i|].x|_$hexes_in_mask[$atit_i|].y| {CONTAINER_ID}}
  {VARIABLE {INTERIOR_SPACE_VAR}.hexes_x_list ${INTERIOR_SPACE_VAR}.hexes_x_list|,$hexes_in_mask[$atit_i|].x}
  {VARIABLE {INTERIOR_SPACE_VAR}.hexes_y_list ${INTERIOR_SPACE_VAR}.hexes_y_list|,$hexes_in_mask[$atit_i|].y}
{NEXT atit_i}
{CLEAR_VARIABLE hexes_in_mask}
[terrain_mask]
  x=${INTERIOR_SPACE_VAR}.mask_x
  y=${INTERIOR_SPACE_VAR}.mask_y
  mask={INTERIOR_MAP_WITH_VOID_BORDER}
  [rule]
    old={PROXY_TERRAIN}
  [/rule]
  [rule]
    use_old=yes
  [/rule]
[/terrain_mask]

{VARIABLE {INTERIOR_SPACE_VAR}.mask {INTERIOR_MAP_WITH_VOID_BORDER}}
#enddef

#define PLACE_INTERIOR_SPACE INTERIOR_SPACE_VAR CONTAINER_ID
{GET_OR_CREATE_AREA_FOR_INTERIOR_MAP {INTERIOR_SPACE_VAR}}

{VARIABLE {INTERIOR_SPACE_VAR}.hexes_x_list 0}
{VARIABLE {INTERIOR_SPACE_VAR}.hexes_y_list 0}

{ADD_TO_INTERIOR_TERRAIN ({INTERIOR_SPACE_VAR}) ({CONTAINER_ID}) ${INTERIOR_SPACE_VAR}.mask|}

[set_variables]
  name=space_being_placed
  to_variable={INTERIOR_SPACE_VAR}
[/set_variables]
[if]
  [insert_tag]
    name=then
    variable={INTERIOR_SPACE_VAR}.place_func
  [/insert_tag]
[/if]
{CLEAR_VARIABLE space_being_placed}
#enddef

# The following macro empties an interior space and then clears the interior space var. The space var's wipe_func is expected to clear everything that has been added outside of this file's macros.
#define WIPE_INTERIOR_SPACE INTERIOR_SPACE_VAR
[set_variables]
  name=space_being_wiped
  to_variable={INTERIOR_SPACE_VAR}
[/set_variables]
[if]
  [insert_tag]
    name=then
    variable={INTERIOR_SPACE_VAR}.wipe_func
  [/insert_tag]
[/if]
{CLEAR_VARIABLE space_being_wiped}
[terrain_mask]
  x=${INTERIOR_SPACE_VAR}.mask_x
  y=${INTERIOR_SPACE_VAR}.mask_y
  mask=${INTERIOR_SPACE_VAR}.mask
  [rule]
    new={VOID_TERRAINS}
    use_old=true
  [/rule]
  [rule]
    terrain={PROXY_TERRAIN}
  [/rule]
[/terrain_mask]
[store_locations]
  terrain={PROXY_TERRAIN}
  variable=hexes_in_mask
[/store_locations]
{FOREACH hexes_in_mask wisou_i}
  {VARIABLE hex_is_contained_in_unit_$hexes_in_mask[$wisou_i|].x|_$hexes_in_mask[$wisou_i|].y| false}
  {CLEAR_VARIABLE hex_owner_id_$hexes_in_mask[$wisou_i|].x|_$hexes_in_mask[$wisou_i|].y|}
{NEXT atit_i}
{CLEAR_VARIABLE hexes_in_mask}
[terrain_mask]
  x=${INTERIOR_SPACE_VAR}.mask_x
  y=${INTERIOR_SPACE_VAR}.mask_y
  mask=${INTERIOR_SPACE_VAR}.mask
  [rule]
    old={PROXY_TERRAIN}
    terrain=_off^_usr
  [/rule]
  [rule]
    use_old=true
  [/rule]
[/terrain_mask]

{CLEAR_VARIABLE {INTERIOR_SPACE_VAR}}
#enddef

#define SETUP_INTERIOR_SPACE_VARS INTERIOR_SPACE_VAR INTERIOR_PLACE_FUNC INTERIOR_WIPE_FUNC INTERIOR_MAP_WITH_VOID_BORDER INTERIOR_MAP_RADIUS_INCLUDING_ONE_VOID INTERIOR_MAP_CENTER_X_WHICH_MUST_BE_EVEN INTERIOR_MAP_CENTER_Y
[set_variables]
  name={INTERIOR_SPACE_VAR}
  [value]
    mask={INTERIOR_MAP_WITH_VOID_BORDER}
    center_x_on_mask={INTERIOR_MAP_CENTER_X_WHICH_MUST_BE_EVEN}
    center_y_on_mask={INTERIOR_MAP_CENTER_Y}
    radius={INTERIOR_MAP_RADIUS_INCLUDING_ONE_VOID}
  [/value]
[/set_variables]
[set_variables]
  name={INTERIOR_SPACE_VAR}.place_func
  [literal]
    {INTERIOR_PLACE_FUNC}
  [/literal]
[/set_variables]
[set_variables]
  name={INTERIOR_SPACE_VAR}.wipe_func
  [literal]
    {INTERIOR_WIPE_FUNC}
  [/literal]
[/set_variables]
#enddef

#define PLACE_UNIT_WITH_INTERIOR UNIT_ATTRIBUTES INTERIOR_PLACE_FUNC INTERIOR_WIPE_FUNC INTERIOR_MAP_WITH_VOID_BORDER INTERIOR_MAP_RADIUS_INCLUDING_ONE_VOID INTERIOR_MAP_CENTER_X_WHICH_MUST_BE_EVEN INTERIOR_MAP_CENTER_Y
[unit]
  {UNIT_ATTRIBUTES}
  to_variable=unit_with_interior
[/unit]
{SETUP_INTERIOR_SPACE_VARS unit_with_interior.variables.interior_space ({INTERIOR_PLACE_FUNC}) ({INTERIOR_WIPE_FUNC}) ({INTERIOR_MAP_WITH_VOID_BORDER}) ({INTERIOR_MAP_RADIUS_INCLUDING_ONE_VOID}) ({INTERIOR_MAP_CENTER_X_WHICH_MUST_BE_EVEN}) ({INTERIOR_MAP_CENTER_Y})}
{PLACE_INTERIOR_SPACE unit_with_interior.variables.interior_space $unit_with_interior.id}
[unstore_unit]
  variable=unit_with_interior
  find_vacant=yes
[/unstore_unit]
[store_unit]
  [filter]
    [filter_wml]
      underlying_id=$unit_with_interior.underlying_id
    [/filter_wml]
  [/filter]
  variable=unit_with_interior
[/store_unit]
#enddef

