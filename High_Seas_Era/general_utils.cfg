#textdomain wesnoth-High_Seas_Era

# PROXY_TERRAIN needs to be something that is never used on an actual map. "Fog+Impassable" should do... It is used as a temporary value to squeeze extra functionality out of [terrain_mask].
#define PROXY_TERRAIN
_f^Xo#enddef

#define APPLY_FOR_ALL_DIRECTIONS MACRO
{{MACRO} n}
{{MACRO} ne}
{{MACRO} se}
{{MACRO} s}
{{MACRO} sw}
{{MACRO} nw}
#enddef

#define HSE_OPPOSITE_DIRECTION_n
s#enddef
#define HSE_OPPOSITE_DIRECTION_ne
sw#enddef
#define HSE_OPPOSITE_DIRECTION_se
nw#enddef
#define HSE_OPPOSITE_DIRECTION_s
n#enddef
#define HSE_OPPOSITE_DIRECTION_sw
ne#enddef
#define HSE_OPPOSITE_DIRECTION_nw
se#enddef

#define HSE_APPLY_ZOC X Y
[store_unit]
  [filter]
    x={X}
    y={Y}
  [/filter]
  variable=zoced_unit
[/store_unit]
{IF_VAR zoced_unit.abilities.skirmisher.length greater_than 0 ([else] # else
  [store_unit]
    [filter]
      [not]
        side=$zoced_unit.side
      [/not]
      [and]
        [not]
          level=0
        [/not]
        [not]
          [filter_wml]
            zoc=no
          [/filter_wml]
        [/not]
        [or]
          [filter_wml]
            zoc=yes
          [/filter_wml]
        [/or]
      [/and]
      [filter_adjacent]
        x={X}
        y={Y}
      [/filter_adjacent]
    [/filter]
    variable=zocing_units
  [/store_unit]
  [store_side]
    side=$zoced_unit.side
    variable=zoced_unit_side
  [/store_side]
  {FOREACH zocing_units haz_i}
    [store_side]
      side=$zocing_units[$haz_i].side
      variable=zocing_unit_side
    [/store_side]
    {IF_VAR zocing_unit_side.team_name not_equals $zoced_unit_side.team_name ([then]
      {VARIABLE zoced_unit.moves 0}
      [unstore_unit]
        variable=zoced_unit
      [/unstore_unit]
    [/then])}
  {NEXT haz_i}
[/else])}
#enddef

#define HSE_APPLY_VILLAGE_CAPTURE X Y
[store_locations]
  x={X}
  y={Y}
  terrain=*^V*
  variable=village
[/store_locations]
[store_unit]
  [filter]
    x={X}
    y={Y}
  [/filter]
  variable=capturer
[/store_unit]
{IF_VAR village.length equals 1 ([and]
  [variable]
    name=village.owner_side
    not_equals=capturer.side
  [/variable]
[/and]
[then]
  [capture_village]
    x={X}
    y={Y}
    side=$capturer.side
  [/capture_village]
  {VARIABLE capturer.moves 0}
  [unstore_unit]
    variable=capturer
  [/unstore_unit]
[/then])}
#enddef

#define HSE_COMPLETE_MOVETO X Y
[store_unit]
  [filter]
    x={X}
    y={Y}
  [/filter]
  variable=moving_unit
[/store_unit]
[redraw]
  side=$moving_unit.side
[/redraw]
{HSE_APPLY_ZOC {X} {Y}}
{HSE_APPLY_VILLAGE_CAPTURE {X} {Y}}
[scroll_to]
  x={X}
  y={Y}
  check_fogged=yes
[/scroll_to]
[fire_event]
  name=moveto
  [primary_unit]
    x={X}
    y={Y}
  [/primary_unit]
[/fire_event]
#enddef

#define HSE_FIND_CLOSEST_HEX XVAR YVAR STARTX STARTY TARGET_FILTER OBSTRUCTING_FILTER MAX_DISTANCE
{VARIABLE {XVAR} 0}
{VARIABLE {YVAR} 0}
{VARIABLE hfc_min_radius 0}
{VARIABLE hfc_search_done false}
{CLEAR_VARIABLE hfc_stored_locations}
{VARIABLE hfc_current_num_stored_locations 0}
[while]
  [variable]
    name=hfc_search_done
    boolean_equals=false
  [/variable]
  [variable]
    name=hfc_min_radius
    less_than_equal_to={MAX_DISTANCE}
  [/variable]
  [do]
    {VARIABLE hfc_last_num_stored_locations $hfc_current_num_stored_locations}

    [store_locations]
      x={STARTX}
      y={STARTY}
      radius=$hfc_min_radius
      [filter_radius]
        [not]
          {OBSTRUCTING_FILTER}
        [/not]
      [/filter_radius]
      variable=hfc_stored_locations
    [/store_locations]

    [store_locations]
      {TARGET_FILTER}
      [not]
        {OBSTRUCTING_FILTER}
      [/not]
      [and]
        x={STARTX}
        y={STARTY}
        radius=$hfc_min_radius
        [filter_radius]
          [not]
            {OBSTRUCTING_FILTER}
          [/not]
        [/filter_radius]
      [/and]
      variable=hfc_success_locations
    [/store_locations]

    {VARIABLE hfc_current_num_stored_locations $hfc_stored_locations.length}
    {IF_VAR hfc_current_num_stored_locations equals $hfc_last_num_stored_locations ([then]
      # there's no more space to search
      {VARIABLE hfc_search_done true}
    [/then])}

    {IF_VAR hfc_success_locations.length greater_than 0 ([then]
      {VARIABLE {XVAR} $hfc_success_locations[0].x}
      {VARIABLE {YVAR} $hfc_success_locations[0].y}
      {VARIABLE hfc_search_done true}
    [/then])}

    {VARIABLE_OP hfc_min_radius add 1}
  [/do]
[/while]
#enddef

