
#define APPLY_FOR_ALL_DIRECTIONS MACRO
{{MACRO} n}
{{MACRO} ne}
{{MACRO} se}
{{MACRO} s}
{{MACRO} sw}
{{MACRO} nw}
#enddef

#define EHS_OPPOSITE_DIRECTION_n
s#enddef
#define EHS_OPPOSITE_DIRECTION_ne
sw#enddef
#define EHS_OPPOSITE_DIRECTION_se
nw#enddef
#define EHS_OPPOSITE_DIRECTION_s
n#enddef
#define EHS_OPPOSITE_DIRECTION_sw
ne#enddef
#define EHS_OPPOSITE_DIRECTION_nw
se#enddef

#define EXPAND_MAP_TO_SIZE NEW_X_DIM NEW_Y_DIM
[store_map_dimensions]
[/store_map_dimensions]

{VARIABLE new_map_string "usage=map
border_size=1
"}

{VARIABLE new_x_max {NEW_X_DIM}}
{VARIABLE_OP new_x_max add 1}
{VARIABLE new_y_max {NEW_Y_DIM}}
{VARIABLE_OP new_y_max add 1}

{VARIABLE emts_y 0}
[while]
  [variable]
    name=emts_y
    less_than_equal_to=$new_y_max
  [/variable]
  [do]
    {VARIABLE new_map_string "$new_map_string|
"}
    {VARIABLE emts_x 0}
    [while]
      [variable]
        name=emts_x
        less_than_equal_to=$new_x_max
      [/variable]
      [do]
        {IF_VAR emts_x greater_than $map_size.width ([or]
	  [variable]
	    name=emts_y
	    greater_than=$map_size.height
	  [/variable]
	[/or]
	[or]
	  [variable]
	    name=emts_x
	    equals=0
	  [/variable]
	[/or]
	[or]
	  [variable]
	    name=emts_y
	    equals=0
	  [/variable]
	[/or]
	[then]
	  {VARIABLE new_map_string "$new_map_string|_off^_usr"}
	[/then]
	[else]
	  [store_locations]
	    x=$emts_x
	    y=$emts_y
	    variable=this_location
	  [/store_locations]
	  {VARIABLE new_map_string "$new_map_string|$this_location.terrain|"}
	[/else])}
	{IF_VAR emts_x less_than $new_x_max ([then]
	  {VARIABLE new_map_string "$new_map_string|, "}
	[/then])}
	{VARIABLE_OP emts_x add 1}
      [/do]
    [/while]
    {VARIABLE_OP emts_y add 1}
  [/do]
[/while]

[replace_map]
  map=$new_map_string
  expand=yes
[/replace_map]
#enddef

#define VOID_TERRAINS
Xv,_off^_usr,_s#enddef
#define OBSTRUCTING_TERRAINS
Mm^Xm,Md^Xm,Xu,Xv,Xos,*^Xo,_off^_usr,_s,_f#enddef

#define GET_MINMAX_LOCATIONS RADIUS
[store_map_dimensions]
[/store_map_dimensions]
{VARIABLE min_x_for_center 1}
{VARIABLE_OP min_x_for_center add {RADIUS}}
{VARIABLE min_y_for_center 1}
{VARIABLE_OP min_y_for_center add {RADIUS}}
{VARIABLE max_x_for_center $map_size.width}
{VARIABLE_OP max_x_for_center add -{RADIUS}}
{VARIABLE max_y_for_center $map_size.height}
{VARIABLE_OP max_y_for_center add -{RADIUS}}
#enddef

#define PLACE_INTERIOR_TERRAIN INTERIOR_MAP_WITH_VOID_BORDER INTERIOR_MAP_RADIUS_INCLUDING_ONE_VOID INTERIOR_MAP_CENTER_X_WHICH_MUST_BE_EVEN INTERIOR_MAP_CENTER_Y
{GET_MINMAX_LOCATIONS {INTERIOR_MAP_RADIUS_INCLUDING_ONE_VOID}}
[store_locations]
  x=$min_x_for_center|-$max_x_for_center
  y=$min_y_for_center|-$max_y_for_center
  [not]
    [not]
      terrain={VOID_TERRAINS}
    [/not]
    radius={INTERIOR_MAP_RADIUS_INCLUDING_ONE_VOID}
  [/not]
  variable=possible_locations
[/store_locations]

{VARIABLE interior_map_max_dimensions {INTERIOR_MAP_RADIUS_INCLUDING_ONE_VOID}}
{VARIABLE_OP interior_map_max_dimensions multiply 2}
{VARIABLE_OP interior_map_max_dimensions add 1}

{IF_VAR possible_locations.length equals 0 ([then]
  [store_map_dimensions]
  [/store_map_dimensions]
  {VARIABLE new_map_size_x $map_size.width}
  {VARIABLE new_map_size_y $map_size.height}
  {IF_VAR map_size.width less_than $map_size.height ([then]
    # expand horizontally
    {IF_VAR new_map_size_y less_than $interior_map_max_dimensions ([then]
      {VARIABLE new_map_size_y $interior_map_max_dimensions}
    [/then])}
    {VARIABLE_OP new_map_size_x add $interior_map_max_dimensions}
  [/then]
  [else]
    # expand vertically
    {IF_VAR new_map_size_x less_than $interior_map_max_dimensions ([then]
      {VARIABLE new_map_size_x $interior_map_max_dimensions}
    [/then])}
    {VARIABLE_OP new_map_size_y add $interior_map_max_dimensions}
  [/else])}
  {EXPAND_MAP_TO_SIZE $new_map_size_x $new_map_size_y}

  {GET_MINMAX_LOCATIONS {INTERIOR_MAP_RADIUS_INCLUDING_ONE_VOID}}
  [store_locations]
    x=$min_x_for_center|-$max_x_for_center
    y=$min_y_for_center|-$max_y_for_center
    [not]
      [not]
        terrain={VOID_TERRAINS}
      [/not]
      radius={INTERIOR_MAP_RADIUS_INCLUDING_ONE_VOID}
    [/not]
    variable=possible_locations
  [/store_locations]

  {IF_VAR possible_locations.length equals 0 ([then]
    [message]
      speaker=narrator
      message=_"HSHS error: Expanded map, but still couldn't find place to put new terrain area."
    [/message]
  [/then])}
[/then])}

{VARIABLE center_x $possible_locations[0].x}
{VARIABLE center_y $possible_locations[0].y}
{VARIABLE mask_x $center_x}
{VARIABLE mask_y $center_y}

{VARIABLE_OP mask_x add -{INTERIOR_MAP_CENTER_X_WHICH_MUST_BE_EVEN}}
{VARIABLE_OP mask_y add -{INTERIOR_MAP_CENTER_Y}}
{VARIABLE_OP mask_x add 1}
{VARIABLE_OP mask_y add 1}

[terrain_mask]
  x=$mask_x
  y=$mask_y
  mask={INTERIOR_MAP_WITH_VOID_BORDER}
  [rule]
    new={VOID_TERRAINS}
    use_old=yes
  [/rule]
[/terrain_mask]
#enddef

#define PLACE_INTERIOR_SPACE_OF_UNIT
{PLACE_INTERIOR_TERRAIN $unit_with_interior.variables.interior_space.mask $unit_with_interior.variables.interior_space.radius $unit_with_interior.variables.interior_space.center_x_on_mask $unit_with_interior.variables.interior_space.center_y_on_mask}
{VARIABLE unit_with_interior.variables.interior_space.mask_x $mask_x}
{VARIABLE unit_with_interior.variables.interior_space.mask_y $mask_y}
{VARIABLE unit_with_interior.variables.interior_space.center_x $center_x}
{VARIABLE unit_with_interior.variables.interior_space.center_y $center_y}
[if]
  [insert_tag]
    name=then
    variable=unit_with_interior.variables.interior_place_func
  [/insert_tag]
[/if]
#enddef
#define WIPE_INTERIOR_SPACE_OF_UNIT
[if]
  [insert_tag]
    name=then
    variable=unit_with_interior.variables.interior_wipe_func
  [/insert_tag]
[/if]
[terrain_mask]
  x=$unit_with_interior.variables.interior_space.mask_x
  y=$unit_with_interior.variables.interior_space.mask_y
  mask=$unit_with_interior.variables.interior_space.mask
  [rule]
    new={VOID_TERRAINS}
    use_old=true
  [/rule]
  [rule]
    terrain=_off^_usr
  [/rule]
[/terrain_mask]
#enddef

#define PLACE_UNIT_WITH_INTERIOR UNIT_ATTRIBUTES UNIT_INTERIOR_PLACE_FUNC UNIT_INTERIOR_WIPE_FUNC INTERIOR_MAP_WITH_VOID_BORDER INTERIOR_MAP_RADIUS_INCLUDING_ONE_VOID INTERIOR_MAP_CENTER_X_WHICH_MUST_BE_EVEN INTERIOR_MAP_CENTER_Y
{CLEAR_VARIABLE unit_with_interior}
[unit]
  {UNIT_ATTRIBUTES}
  [+variables]
    has_interior_space=true
    [interior_space]
      mask={INTERIOR_MAP_WITH_VOID_BORDER}
      center_x_on_mask={INTERIOR_MAP_CENTER_X_WHICH_MUST_BE_EVEN}
      center_y_on_mask={INTERIOR_MAP_CENTER_Y}
      radius={INTERIOR_MAP_RADIUS_INCLUDING_ONE_VOID}
    [/interior_space]
  [/variables]
  to_variable=unit_with_interior
[/unit]
[set_variables]
  name=unit_with_interior.variables.interior_place_func
  [literal]
    {UNIT_INTERIOR_PLACE_FUNC}
  [/literal]
[/set_variables]
[set_variables]
  name=unit_with_interior.variables.interior_wipe_func
  [literal]
    {UNIT_INTERIOR_WIPE_FUNC}
  [/literal]
[/set_variables]
{PLACE_INTERIOR_SPACE_OF_UNIT}
[unstore_unit]
  variable=unit_with_interior
  find_vacant=yes
[/unstore_unit]
#enddef

#define GET_XY_FROM_MASK_XY XVAR YVAR INFO_VAR X_ON_MASK Y_ON_MASK
{VARIABLE {XVAR} ${INFO_VAR}.mask_x}
{VARIABLE_OP {XVAR} add {X_ON_MASK}}
{VARIABLE_OP {XVAR} add -1}
{VARIABLE {YVAR} ${INFO_VAR}.mask_y}
{VARIABLE_OP {YVAR} add {Y_ON_MASK}}
{VARIABLE gxyfmxy_evenness_checker ${INFO_VAR}.mask_x}
{VARIABLE_OP gxyfmxy_evenness_checker divide 2}
{VARIABLE_OP gxyfmxy_evenness_checker multiply 2}
{IF_VAR gxyfmxy_evenness_checker equals ${INFO_VAR}.mask_x ([then]
  {VARIABLE gxyfmxy_evenness_checker {X_ON_MASK}}
  {VARIABLE_OP gxyfmxy_evenness_checker divide 2}
  {VARIABLE_OP gxyfmxy_evenness_checker multiply 2}
  {IF_VAR gxyfmxy_evenness_checker not_equals {X_ON_MASK} ([then]
    {VARIABLE_OP {YVAR} add -1}
  [/then])}
[/then]
[else]
  {VARIABLE_OP {YVAR} add -1}
[/else])}
#enddef

