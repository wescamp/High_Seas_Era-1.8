#textdomain wesnoth-High_Seas_Era

{~add-ons/High_Seas_Era/ship_feature_manning.cfg}

#define SINKING_SHIP_HITPOINTS
250#enddef

#define USE_HSE_SHIP_INTERIOR_SYSTEM

[event]
name=side turn
first_time_only=no
  [store_unit]
    [filter]
      {IS_HSE_SHIP}
    [/filter]
    variable=hse_ships
  [/store_unit]
  {FOREACH hse_ships usis_i}
    {HSE_SHIP_REFRESH_LABELS hse_ships[$usis_i]}
  {NEXT usis_i}
[/event]

[event]
name=last breath
first_time_only=no
[filter]
  {IS_HSE_SHIP}
[/filter]
  # Oh no! A ship has been killed! Let's not have that actually happen
  [store_unit]
    [filter]
      x=$x1
      y=$y1
    [/filter]
    variable=sinking_ship
  [/store_unit]
  {IF_VAR sinking_ship.variables.ship_is_sinking boolean_equals true ([then]
    # What? Someone managed to kill the sinking ship? That does not happen
    {VARIABLE sinking_ship.hitpoints {SINKING_SHIP_HITPOINTS}}
    [unstore_unit]
      variable=sinking_ship
      text=_"Still sinking!"
      red,green,blue=255,0,0
    [/unstore_unit]
  [/then]
  [else]
    # The actual ship unit stays alive, for now...
    {VARIABLE sinking_ship.hitpoints {SINKING_SHIP_HITPOINTS}}
    # Aesthetically it's nice for the hitpoints to be drawn in red etc., so make the max much much higher
    {VARIABLE sinking_ship.max_hitpoints 2000}
    # Set the sinking timer
    {VARIABLE sinking_ship.variables.ship_is_sinking true}
    {IF_VAR sinking_ship.side equals $side_number ([then]
      # Hack - ships dying on their own turn need a different timer setting to be consistent
      {VARIABLE sinking_ship.variables.turns_to_sink 2}
    [/then]
    [else]
      {VARIABLE sinking_ship.variables.turns_to_sink 3}
    [/else])}
    [set_variables]
      name=sinking_ship.abilities.dummy
      mode=append
      [value]
        id=ship_is_sinking
        name= _ "<span color='#FF0000'>sinking (3)</span>"
        female_name= _ "female^<span color='#FF0000'>sinking (3)</span>"
        description=_ "Sinking:
This ship is sinking and you have to get out in 3 turns if you want to live!"
      [/value]
    [/set_variables]
    [unstore_unit]
      variable=sinking_ship
      text=_"Sinking!"
      red,green,blue=255,0,0
    [/unstore_unit]
    
    [sound]
      name=water-blast.wav
    [/sound]
    
    # Ruin the interior (this will be done anyway on the next turn start, but the ship ought to take some damage now at least so players know what's going on)
    {SINK_TURN 3 sinking_ship}
    
    [fire_event]
      name=hse_ship_sunk
      [primary_unit]
        x=$sinking_ship.x
        y=$sinking_ship.y
      [/primary_unit]
      [secondary_unit]
        x=$second_unit.x
        y=$second_unit.y
      [/secondary_unit]
    [/fire_event]
  [/else])}
[/event]

# Hack - sinking ships don't take damage
[event]
name=defender hits
first_time_only=no
[filter]
  {IS_HSE_SHIP}
  [filter_wml]
    [variables]
      ship_is_sinking=true
    [/variables]
  [/filter_wml]
[/filter]
  {VARIABLE unit.hitpoints {SINKING_SHIP_HITPOINTS}}
  [unstore_unit]
    variable=unit
    text=_"(no use)"
    red,green,blue=255,0,0
  [/unstore_unit]
[/event]
[event]
name=attacker hits
first_time_only=no
[filter_second]
  {IS_HSE_SHIP}
  [filter_wml]
    [variables]
      ship_is_sinking=true
    [/variables]
  [/filter_wml]
[/filter_second]
  {VARIABLE second_unit.hitpoints {SINKING_SHIP_HITPOINTS}}
  [unstore_unit]
    variable=second_unit
    text=_"(no use)"
    red,green,blue=255,0,0
  [/unstore_unit]
[/event]

[event]
name=side turn
first_time_only=no
  [store_unit]
    [filter]
      side=$side_number
      {IS_HSE_SHIP}
      [filter_wml]
        [variables]
          ship_is_sinking=true
        [/variables]
      [/filter_wml]
    [/filter]
    variable=sinking_ships
  [/store_unit]

  {FOREACH sinking_ships usis_i}
    {SINK_TURN_VARIABLE sinking_ships[$usis_i].variables.turns_to_sink sinking_ships[$usis_i]}
    {IF_VAR sinking_ships[$usis_i].variables.turns_to_sink less_than_equal_to 0 ([then]
      # Sunk!

      # The interior has been cleared of units already; we need only wipe it
      [set_variables]
        name=unit_with_interior
        to_variable=sinking_ships[$usis_i]
      [/set_variables]
      {WIPE_INTERIOR_SPACE unit_with_interior.variables.interior_space}
      [set_variables]
        name=sinking_ships[$usis_i]
        to_variable=unit_with_interior
      [/set_variables]

      [unstore_unit]
        variable=sinking_ships[$usis_i]
        text=_"Sunk!"
        red,green,blue=0,0,255
      [/unstore_unit]

      # Remove the unit at last.
      [kill]
        x=$sinking_ships[$usis_i].x
        y=$sinking_ships[$usis_i].y
        animate=yes
        fire_event=no
      [/kill]

      # Place the shipwreck image.
      [item]
        x=$sinking_ships[$usis_i].x
        y=$sinking_ships[$usis_i].y
        image=scenery/wreck.png
      [/item]
    [/then]
    [else]
      {VARIABLE old_turns_to_sink $sinking_ships[$usis_i].variables.turns_to_sink}
      {VARIABLE_OP sinking_ships[$usis_i].variables.turns_to_sink add -1}
      [unstore_unit]
        variable=sinking_ships[$usis_i]
      [/unstore_unit]
      [object]
        silent=yes
        [filter]
          x=$sinking_ships[$usis_i].x
          y=$sinking_ships[$usis_i].y
        [/filter]
        [effect]
          apply_to=remove_ability
          [abilities]
            [dummy]
              id=ship_is_sinking
            [/dummy]
          [/abilities]
        [/effect]
        [effect]
          apply_to=new_ability
          [abilities]
            [dummy]
              id=ship_is_sinking
              name= _ "<span color='#FF0000'>sinking ($old_turns_to_sink|)</span>"
              female_name= _ "female^<span color='#FF0000'>sinking ($old_turns_to_sink|)</span>"
              description=_ "Sinking:
This ship is sinking and you have to get out in $old_turns_to_sink| turns if you want to live!"
            [/dummy]
          [/abilities]
        [/effect]
      [/object]
    [/else])}
  {NEXT usis_i}
[/event]

{USE_SHIP_FEATURE_MANNING_SYSTEM}

[event]
name=prestart
  ################################# The ship-boarding menu item (usually doesn't give a message with options)
  [set_menu_item]
    id=hse_board_ship
    description=_"Get on board"
    image=cursors/move.png

    [filter_location]
      [filter]
        side=$side_number
	[not]
	  [filter_wml]
	    moves=0
	  [/filter_wml]
	[/not]
        [not]
          {IS_HSE_SHIP}
        [/not]
      [/filter]
      [filter_adjacent_location]
	[filter]
	  {IS_HSE_SHIP}
	[/filter]
      [/filter_adjacent_location]
    [/filter_location]

    [command]
      [store_unit]
        [filter]
          x=$x1
          y=$y1
        [/filter]
        variable=boarder
      [/store_unit]

      [store_unit]
        [filter]
          {IS_HSE_SHIP}
          [filter_adjacent]
            x=$x1
            y=$y1
          [/filter_adjacent]
        [/filter]
        variable=adjacent_ships
      [/store_unit]

      {VARIABLE tried_to_board false}
      {IF_VAR adjacent_ships.length equals 1 ([then]
        {TRY_TO_BOARD boarder adjacent_ships}
        {VARIABLE tried_to_board true}
      [/then]
      [else] # There's more than one...
        [message]
          side_for=$side_number
          speaker=narrator
          image="units/unknown-unit.png~TC($side_number|,magenta)"
          message=_"Which ship do you want to board?"
          [option]
            message=_"Never mind."
          [/option]
          {SHIP_BOARDING_OPTION 0}
          {SHIP_BOARDING_OPTION 1}
          {SHIP_BOARDING_OPTION 2}
          {SHIP_BOARDING_OPTION 3}
          {SHIP_BOARDING_OPTION 4}
          {SHIP_BOARDING_OPTION 5}
        [/message]
      [/else])}

      {IF_VAR tried_to_board boolean_equals true ([then]
        {DISPLAY_STANDARD_BOARDING_FAILURE_MESSAGES}
      [/then])}
    [/command]
  [/set_menu_item]
  
  ################################# The ship-disembarking menu item (always does give a message with options)
  [set_menu_item]
    id=hse_disembark_ship
    description=_"Disembark"
    image=cursors/move.png
    
    [show_if]
      [have_unit]
        [filter_wml]
          [variables]
            is_hse_ship=true
            gangplank_x=$x1
            gangplank_y=$y1
          [/variables]
        [/filter_wml]
      [/have_unit]
      [or]
        [have_unit]
          x=$x1
          y=$y1
          [and]
            # Flying units need not use the gangplank.
            [filter_wml]
              [movement_costs]
                unwalkable=1
              [/movement_costs]
            [/filter_wml]
            # Leaders can't be trapped on dying ships.
            [or]
              canrecruit=yes
            [/or]
          [/and]
        [/have_unit]
        [variable]
          name=hex_is_contained_in_unit_$x1|_$y1|
          boolean_equals=true
        [/variable]
        [have_unit]
          {IS_HSE_SHIP}
          id=$hex_owner_id_$x1|_$y1|
        [/have_unit]
      [/or]
    [/show_if]

    [filter_location]
      [filter]
        side=$side_number
        [not]
          [filter_wml]
            moves=0
          [/filter_wml]
        [/not]
      [/filter]
    [/filter_location]
    
    [command]
      [store_unit]
        [filter]
          x=$x1
          y=$y1
        [/filter]
        variable=disembarker
      [/store_unit]

      [store_unit]
        [filter]
          {IS_HSE_SHIP}
          id=$hex_owner_id_$x1|_$y1|
        [/filter]
        variable=disembarkee
      [/store_unit]

      {VARIABLE disembarker_impassable_terrains {OBSTRUCTING_TERRAINS}}
      {IF_VAR disembarker.movement_costs.deep_water greater_than 0 ([else] # else
        {VARIABLE disembarker_impassable_terrains $disembarker_impassable_terrains|,Wo}
      [/else])}
      {IF_VAR disembarker.movement_costs.unwalkable greater_than 0 ([else] # else
        {VARIABLE disembarker_impassable_terrains $disembarker_impassable_terrains|,Ql,Qlf,Qxu}
      [/else])}

      [store_locations]
        [filter_adjacent_location]
          x=$disembarkee.x
          y=$disembarkee.y
        [/filter_adjacent_location]
        [not]
          terrain=$disembarker_impassable_terrains
        [/not]
        [not]
          [filter]
          [/filter]
        [/not]
        variable=possible_disembark_locations
      [/store_locations]

      [message]
        side_for=$side_number
        x=$disembarkee.x
        y=$disembarkee.y
        image=units/unknown-unit.png~TC($side_number|,magenta)
        message=_"In which direction do you want to disembark?"
        [option]
          message=_"Never mind."
        [/option]
        {APPLY_FOR_ALL_DIRECTIONS SHIP_DISEMBARKING_OPTION}
      [/message]
    [/command]
  [/set_menu_item]
[/event]
#enddef

#define SHIP_BOARDING_OPTION INDEX
          [option]
            message="&$adjacent_ships[{INDEX}].image|~TC($adjacent_ships[{INDEX}].side_number|,magenta)="+_"Board $adjacent_ships[{INDEX}].name"
            [show_if]
              [variable]
                name=adjacent_ships.length
                greater_than={INDEX}
              [/variable]
            [/show_if]
            [command]
              {TRY_TO_BOARD boarder adjacent_ships[{INDEX}]}
              {VARIABLE tried_to_board true}
            [/command]
          [/option]
#enddef

#define DISPLAY_STANDARD_BOARDING_FAILURE_MESSAGES
        {IF_VAR boarding_failed_not_enough_moves boolean_equals true ([then]
          [message]
            side_for=$side_number
            speaker=narrator
            image="units/unknown-unit.png~TC($side_number|,magenta)"
            message=_"Your unit does not have enough moves to board."
          [/message]
        [/then])}
        {IF_VAR boarding_failed_no_room boolean_equals true ([then]
          [message]
            side_for=$side_number
            speaker=narrator
            image="units/unknown-unit.png~TC($side_number|,magenta)"
            message=_"That vessel is so packed with units that you cannot enter!"
          [/message]
        [/then])}
#enddef

#define HSE_UNBOARD_MESSAGE_n
_"Disembark to the north"#enddef
#define HSE_UNBOARD_MESSAGE_ne
_"Disembark to the northeast"#enddef
#define HSE_UNBOARD_MESSAGE_nw
_"Disembark to the northwest"#enddef
#define HSE_UNBOARD_MESSAGE_s
_"Disembark to the south"#enddef
#define HSE_UNBOARD_MESSAGE_se
_"Disembark to the southeast"#enddef
#define HSE_UNBOARD_MESSAGE_sw
_"Disembark to the southwest"#enddef

#define HSE_BOARD_MESSAGE_n
_"Board the vessel to the north"#enddef
#define HSE_BOARD_MESSAGE_ne
_"Board the vessel to the northeast"#enddef
#define HSE_BOARD_MESSAGE_nw
_"Board the vessel to the northwest"#enddef
#define HSE_BOARD_MESSAGE_s
_"Board the vessel to the south"#enddef
#define HSE_BOARD_MESSAGE_se
_"Board the vessel to the southeast"#enddef
#define HSE_BOARD_MESSAGE_sw
_"Board the vessel to the southwest"#enddef

#define HSE_PLANK_MESSAGE_n
_"<span color='#0000FF'>Walk the plank to the north</span>"#enddef
#define HSE_PLANK_MESSAGE_ne
_"<span color='#0000FF'>Walk the plank to the northeast</span>"#enddef
#define HSE_PLANK_MESSAGE_nw
_"<span color='#0000FF'>Walk the plank to the northwest</span>"#enddef
#define HSE_PLANK_MESSAGE_s
_"<span color='#0000FF'>Walk the plank to the south</span>"#enddef
#define HSE_PLANK_MESSAGE_se
_"<span color='#0000FF'>Walk the plank to the southeast</span>"#enddef
#define HSE_PLANK_MESSAGE_sw
_"<span color='#0000FF'>Walk the plank to the southwest</span>"#enddef


#define SHIP_DISEMBARKING_OPTION DIRECTION
          [option]
            message={HSE_UNBOARD_MESSAGE_{DIRECTION}}
            [show_if]
              [have_location]
                [filter_adjacent_location]
                  x=$disembarkee.x
                  y=$disembarkee.y
                  adjacent={HSE_OPPOSITE_DIRECTION_{DIRECTION}}
                [/filter_adjacent_location]
                [not]
                  terrain=$disembarker_impassable_terrains
                [/not]
                [not]
                  [filter]
                  [/filter]
                [/not]
              [/have_location]
            [/show_if]
            [command]
              [store_locations]
                [filter_adjacent_location]
                  x=$disembarkee.x
                  y=$disembarkee.y
                  adjacent={HSE_OPPOSITE_DIRECTION_{DIRECTION}}
                [/filter_adjacent_location]
                variable=hse_disembark_location
              [/store_locations]
              
              [store_unit]
                [filter]
                  x=$disembarker.x
                  y=$disembarker.y
                [/filter]
                kill=yes
                variable=disembarker
              [/store_unit]
              {VARIABLE disembarker.x $hse_disembark_location.x}
              {VARIABLE disembarker.y $hse_disembark_location.y}
              {VARIABLE_OP disembarker.moves add -1}
              [unstore_unit]
                variable=disembarker
              [/unstore_unit]
              {HSE_COMPLETE_MOVETO $disembarker.x $disembarker.y}
            [/command]
          [/option]

          [option]
            message={HSE_BOARD_MESSAGE_{DIRECTION}}
            [show_if]
              [have_location]
                [filter_adjacent_location]
                  x=$disembarkee.x
                  y=$disembarkee.y
                  adjacent={HSE_OPPOSITE_DIRECTION_{DIRECTION}}
                [/filter_adjacent_location]
                [filter]
                  {IS_HSE_SHIP}
                [/filter]
              [/have_location]
            [/show_if]
            [command]
              [store_unit]
                [filter]
                  [filter_adjacent]
                    x=$disembarkee.x
                    y=$disembarkee.y
                    adjacent={HSE_OPPOSITE_DIRECTION_{DIRECTION}}
                  [/filter_adjacent]
                  {IS_HSE_SHIP}
                [/filter]
                variable=boardee
              [/store_unit]
              
              {TRY_TO_BOARD disembarker boardee}
              {DISPLAY_STANDARD_BOARDING_FAILURE_MESSAGES}
            [/command]
          [/option]

          [option]
            message={HSE_PLANK_MESSAGE_{DIRECTION}}
            [show_if]
              [have_location]
                [filter_adjacent_location]
                  x=$disembarkee.x
                  y=$disembarkee.y
                  adjacent={HSE_OPPOSITE_DIRECTION_{DIRECTION}}
                [/filter_adjacent_location]
                [not]
                  [filter]
                  [/filter]
                [/not]
                terrain=$disembarker_impassable_terrains
                [and]
                  terrain=Ql,Qlf,Qxu,Wo
                [/and]
              [/have_location]
            [/show_if]
            [command]
              [store_locations]
                [filter_adjacent_location]
                  x=$disembarkee.x
                  y=$disembarkee.y
                  adjacent={HSE_OPPOSITE_DIRECTION_{DIRECTION}}
                [/filter_adjacent_location]
                variable=hse_disembark_location
              [/store_locations]
              
              [store_unit]
                [filter]
                  x=$disembarker.x
                  y=$disembarker.y
                [/filter]
                kill=yes
                variable=disembarker
              [/store_unit]
              {VARIABLE disembarker.x $hse_disembark_location.x}
              {VARIABLE disembarker.y $hse_disembark_location.y}
              {VARIABLE_OP disembarker.moves add -1}
              {IF_VAR hse_disembark_location.terrain equals Wo ([then]
                [unstore_unit]
                  variable=disembarker
                  text=_"drowned"
                  red,green,blue=0,0,255
                [/unstore_unit]
                {HSE_COMPLETE_MOVETO $disembarker.x $disembarker.y}
                [kill]
                  x=$disembarker.x
                  y=$disembarker.y
                  animate=true
                  fire_event=true
                [/kill]
              [/then]
              [else]
                [unstore_unit]
                  variable=disembarker
                [/unstore_unit]
                {HSE_COMPLETE_MOVETO $disembarker.x $disembarker.y}
                [sound]
                  name=gryphon-shriek-1.ogg
                [/sound]
                [kill]
                  x=$disembarker.x
                  y=$disembarker.y
                  animate=false
                  fire_event=true
                [/kill]
              [/else])}
            [/command]
          [/option]
#enddef


#define TRY_TO_BOARD BOARDER BOARDEE
{VARIABLE boarding_failed_not_enough_moves false}
{VARIABLE boarding_failed_no_room false}
{VARIABLE boarding_failed false}

{IF_VAR {BOARDER}.moves less_than 1 ([then]
  {VARIABLE boarding_failed true}
  {VARIABLE boarding_failed_not_enough_moves true}
[/then]
[else]
  [if]
    [have_unit]
      x=${BOARDEE}.variables.gangplank_x
      y=${BOARDEE}.variables.gangplank_y
    [/have_unit]
    [then]
      {HSE_FIND_CLOSEST_HEX pushed_to_x pushed_to_y ${BOARDEE}.variables.gangplank_x ${BOARDEE}.variables.gangplank_y ([not]
  [filter]
  [/filter]
[/not]) (terrain={OBSTRUCTING_TERRAINS}) 20}
      {IF_VAR pushed_to_x equals 0 ([then]
        {VARIABLE boarding_failed true}
        {VARIABLE boarding_failed_no_room true}
      [/then]
      [else]
        [store_unit]
          [filter]
            x=${BOARDEE}.variables.gangplank_x
            y=${BOARDEE}.variables.gangplank_y
          [/filter]
          kill=yes
          variable=pushed
        [/store_unit]
        {VARIABLE pushed.x $pushed_to_x}
        {VARIABLE pushed.y $pushed_to_y}
        [unstore_unit]
          variable=pushed
        [/unstore_unit]
        {HSE_COMPLETE_MOVETO $pushed_to_x $pushed_to_y}
      [/else])}
    [/then]
  [/if]

  {IF_VAR boarding_failed boolean_equals false ([then]
    [store_unit]
      [filter]
        x=${BOARDER}.x
        y=${BOARDER}.y
      [/filter]
      kill=yes
      variable={BOARDER}
    [/store_unit]
    {VARIABLE {BOARDER}.x ${BOARDEE}.variables.gangplank_x}
    {VARIABLE {BOARDER}.y ${BOARDEE}.variables.gangplank_y}
    {VARIABLE_OP {BOARDER}.moves add -1}
    # The current way of making boarding not too easy / overpowered: Take away enemies' attacks when they board
    [store_side]
      side=${BOARDER}.side
      variable=boarder_side
    [/store_side]
    [store_side]
      side=${BOARDEE}.side
      variable=boardee_side
    [/store_side]
    {IF_VAR boarder_side.team_name not_equals $boardee_side.team_name ([then]
      {VARIABLE {BOARDER}.attacks_left 0}
    [/then])}
    [unstore_unit]
      variable={BOARDER}
    [/unstore_unit]
    {HSE_COMPLETE_MOVETO ${BOARDER}.x ${BOARDER}.y}
  [/then])}
[/else])}
#enddef

#define GET_SINKING_MASK MASK_VAR UNIT_TYPE_VAR TURN
{IF_VAR {UNIT_TYPE_VAR} equals Galleon ([then]
  {VARIABLE {MASK_VAR} {HSE_GALLEON_SINKING_{TURN}_MASK}}
[/then]
[else]
  {VARIABLE {MASK_VAR} {HSE_FRIGATE_SINKING_{TURN}_MASK}}
[/else])}
#enddef

#define SINK_TURN TURN UNIT_VAR
{GET_SINKING_MASK sinking_mask {UNIT_VAR}.type {TURN}}
  [terrain_mask]
    x=${UNIT_VAR}.variables.interior_space.mask_x
    y=${UNIT_VAR}.variables.interior_space.mask_y
    mask=$sinking_mask
    # don't mess with void
    [rule]
      old={VOID_TERRAINS}
      use_old=true
    [/rule]
    # don't mess with stuff not on the mask, either
    [rule]
      new={VOID_TERRAINS}
      use_old=true
    [/rule]
    # Don't improve anything if it's already damaged
    # "Encampment" == "Undamaged"
    [rule]
      new=Ce
      use_old=true
    [/rule]
    # "Dirt" == "Encampment/Road destroyed"
    [rule]
      new=Re
      old=Ce,Rd
      terrain=Re
    [/rule]
    [rule]
      new=Re
      use_old=true
    [/rule]
    # "Shallow water" == "All ground types sink to shallow"
    [rule]
      new=Ww
      old=Wo,Ql,Qxu
      use_old=true
    [/rule]
    [rule]
      new=Ww
      terrain=Ww
    [/rule]
    # "Deep water" == "Ground and shallow sinks to deep"
    [rule]
      new=Wo
      old=Ql,Qxu
      use_old=true
    [/rule]
    [rule]
      new=Wo
      terrain=Wo
    [/rule]
  [/terrain_mask]
[redraw]
[/redraw]
#enddef

#define SINK_TURN_VARIABLE TURN_VAR UNIT_VAR
{IF_VAR {TURN_VAR} equals 3 ([then]
  {SINK_TURN 3 {UNIT_VAR}}
[/then])}
{IF_VAR {TURN_VAR} equals 2 ([then]
  {SINK_TURN 2 {UNIT_VAR}}
[/then])}
{IF_VAR {TURN_VAR} equals 1 ([then]
  {SINK_TURN 1 {UNIT_VAR}}
[/then])}
{IF_VAR {TURN_VAR} equals 0 ([then]
  # death!
  {GET_SINKING_MASK sinking_mask {UNIT_VAR}.type 1}
  [terrain_mask]
    x=${UNIT_VAR}.variables.interior_space.mask_x
    y=${UNIT_VAR}.variables.interior_space.mask_y
    mask=$sinking_mask
    [rule]
      old={VOID_TERRAINS}
      use_old=true
    [/rule]
    [rule]
      terrain={PROXY_TERRAIN}
    [/rule]
  [/terrain_mask]
  [store_unit]
    [filter]
      [filter_location]
        terrain=_f^Xo
      [/filter_location]
    [/filter]
    variable=drowners
  [/store_unit]
  # Full sink to deep water, for aesthetics, except void the gangplank
  [terrain_mask]
    x=${UNIT_VAR}.variables.interior_space.mask_x
    y=${UNIT_VAR}.variables.interior_space.mask_y
    mask=$sinking_mask
    [rule]
      old={PROXY_TERRAIN}
      new=Xv^Bw|
      terrain=Xv
    [/rule]
    [rule]
      old={PROXY_TERRAIN}
      terrain=Wo
    [/rule]
    [rule]
      use_old=true
    [/rule]
  [/terrain_mask]
  [redraw]
  [/redraw]
  {FOREACH drowners stv_i}
    [unstore_unit]
      variable=drowners[$stv_i]
      text=_"drowned"
      red,green,blue=0,0,255
    [/unstore_unit]
    [kill]
      x=$drowners[$stv_i].x
      y=$drowners[$stv_i].y
      animate=true
      fire_event=true
    [/kill]
  {NEXT stv_i}
[/then])}
#enddef

#define HSE_GALLEON_MASK
"border_size=0
usage=mask

Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv,Xv,Xv^Bw|,Xv,Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Ce, Ce, Rd, Ce, Rd, Ce, Rd, Ce, Ce, Ce, Ce, Xv, Xv
Xv, Xv, Xv, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Ce, Xv, Ce, Xv, Ce, Xv, Ce, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv"#enddef

#define HSE_LARGE_STERN_GALLEON_MASK
"border_size=0
usage=mask

Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv,Xv,Xv^Bw|,Xv,Xv, Xv, Xv, Xv, Xv
Xv, Xv, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Xv, Xv, Xv, Xv
Xv, Xv, Ce, Ce, Ce, Rd, Ce, Rd, Ce, Rd, Ce, Ce, Ce, Ce, Xv, Xv
Xv, Xv, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Xv, Xv, Xv
Xv, Xv, Ce, Xv, Ce, Xv, Ce, Xv, Ce, Xv, Ce, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv"#enddef

#define HSE_GALLEON_SINKING_3_MASK
"border_size=0
usage=mask

Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv,Xv,Xv^Bw|,Xv,Xv, Xv, Xv, Xv, Xv
Xv, Xv, Ww, Ce, Re, Ce, Re, Ce, Ce, Ce, Ce, Ce, Xv, Xv, Xv, Xv
Xv, Xv, Ww, Ww, Re, Re, Ce, Re, Ce, Re, Ce, Ce, Ce, Ce, Xv, Xv
Xv, Xv, Ww, Ww, Re, Ww, Re, Re, Re, Ce, Re, Ce, Ce, Xv, Xv, Xv
Xv, Xv, Ww, Xv, Ww, Xv, Ww, Xv, Re, Xv, Re, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv"#enddef

#define HSE_GALLEON_SINKING_2_MASK
"border_size=0
usage=mask

Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv,Xv,Xv^Bw|,Xv,Xv, Xv, Xv, Xv, Xv
Xv, Xv, Wo, Re, Ww, Re, Ww, Re, Re, Re, Ce, Ce, Xv, Xv, Xv, Xv
Xv, Xv, Wo, Wo, Ww, Ww, Re, Ww, Re, Ww, Re, Re, Ce, Ce, Xv, Xv
Xv, Xv, Wo, Wo, Ww, Wo, Ww, Ww, Ww, Re, Ww, Re, Ce, Xv, Xv, Xv
Xv, Xv, Wo, Xv, Wo, Xv, Wo, Xv, Ww, Xv, Ww, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv"#enddef

#define HSE_GALLEON_SINKING_1_MASK
"border_size=0
usage=mask

Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv,Xv,Xv^Bw|,Xv,Xv, Xv, Xv, Xv, Xv
Xv, Xv, Wo, Ww, Wo, Ww, Wo, Ww, Ww, Ww, Re, Re, Xv, Xv, Xv, Xv
Xv, Xv, Wo, Wo, Wo, Wo, Ww, Wo, Ww, Wo, Ww, Ww, Re, Re, Xv, Xv
Xv, Xv, Wo, Wo, Wo, Wo, Wo, Wo, Wo, Ww, Wo, Ww, Re, Xv, Xv, Xv
Xv, Xv, Wo, Xv, Wo, Xv, Wo, Xv, Wo, Xv, Wo, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv"#enddef



#define HSE_FRIGATE_MASK
"border_size=0
usage=mask

Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv,Xv,Xv^Bw|,Xv,Xv, Xv, Xv
Xv, Ce, Ce, Ce, Ce, Ce, Ce, Ce, Xv, Xv
Xv, Ce, Rd, Ce, Rd, Ce, Rd, Ce, Ce, Xv
Xv, Xv, Ce, Xv, Ce, Xv, Ce, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv"#enddef

#define HSE_FRIGATE_SINKING_3_MASK
"border_size=0
usage=mask

Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv,Xv,Xv^Bw|,Xv,Xv, Xv, Xv
Xv, Ww, Re, Ce, Re, Ce, Ce, Ce, Xv, Xv
Xv, Ww, Re, Ww, Re, Re, Re, Ce, Ce, Xv
Xv, Xv, Ww, Xv, Ww, Xv, Re, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv"#enddef

#define HSE_FRIGATE_SINKING_2_MASK
"border_size=0
usage=mask

Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv,Xv,Xv^Bw|,Xv,Xv, Xv, Xv
Xv, Wo, Ww, Re, Ww, Re, Re, Ce, Xv, Xv
Xv, Wo, Ww, Wo, Ww, Ww, Ww, Re, Re, Xv
Xv, Xv, Wo, Xv, Wo, Xv, Ww, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv"#enddef

#define HSE_FRIGATE_SINKING_1_MASK
"border_size=0
usage=mask

Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv
Xv, Xv, Xv, Xv,Xv,Xv^Bw|,Xv,Xv, Xv, Xv
Xv, Wo, Wo, Ww, Wo, Ww, Ww, Re, Xv, Xv
Xv, Wo, Wo, Wo, Wo, Wo, Wo, Ww, Ww, Xv
Xv, Xv, Wo, Xv, Wo, Xv, Wo, Xv, Xv, Xv
Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv, Xv"#enddef


#define IS_HSE_SHIP
  [filter_wml]
    [variables]
      is_hse_ship=true
    [/variables]
  [/filter_wml]
#enddef

#define PLACE_HSE_SHIP HITPOINT_INCREASE RAM_DAMAGE OTHER_ATTRIBUTES MASK MASK_CENTER_X MASK_CENTER_Y MASK_RADIUS SETUP
{PLACE_UNIT_WITH_INTERIOR
(
  {OTHER_ATTRIBUTES}
  gender=female
  random_traits=no
  upkeep=0
  max_experience=9999
  zoc=no
  ellipse=misc/ellipse-nozoc

  [modifications]
    {TRAIT_MECHANICAL}
    [object]
      [effect]
        apply_to=resistance
        replace=true
        [resistance]
          blade=40
          pierce=40
          impact=100
          fire=120
          cold=80
          arcane=20
        [/resistance]
      [/effect]
      [effect]
        apply_to=defense
        replace=true
        [defense]
          deep_water=50
          shallow_water=60
          swamp_water=70
          reef=70
          village=70
        [/defense]
      [/effect]
      [effect]
        apply_to=movement_costs
        replace=true
        [movement_costs]
          deep_water=1
          shallow_water=1
          swamp_water=3
          reef=3
          village=1
        [/movement_costs]
      [/effect]
      [effect]
        apply_to=movement
        set=1
      [/effect]
      [effect]
        apply_to=hitpoints
        increase_total={HITPOINT_INCREASE}
      [/effect]
      [effect]
        apply_to=remove_attacks
      [/effect]
      [effect]
        apply_to=new_attack
        name= _ "ram"
        icon=attacks/blank-attack.png
        type=impact
        range=melee
        damage={RAM_DAMAGE}
        number=1
      [/effect]
      [effect]
        apply_to=new_animation
        [attack_anim]
          [filter_attack]
            name="ram"
          [/filter_attack]
          [frame]
            begin=-200
            sound=water-blast.wav
          [/frame]
        [/attack_anim]
      [/effect]
      [effect]
        apply_to=new_attack
        name= _ "cannon"
        icon=attacks/thunderstick.png
        type=impact
        range=ranged
        damage=10
        number=0
      [/effect]
      [effect]
        apply_to=new_animation
        [attack_anim]
          [filter_attack]
            name=cannon
          [/filter_attack]
          [missile_frame]
            begin=-200
            end=0
            image="projectiles/stone.png"
            image_diagonal="projectiles/stone.png"
          [/missile_frame]
          [frame]
            begin=-200
            sound=gunshot.wav
          [/frame]
        [/attack_anim]
      [/effect]
    [/object]	
  [/modifications]

  [+variables]
    is_hse_ship=true
  [/variables]
)
({SETUP})
(
  {HSE_SHIP_DELETE_CANNONS}
  {HSE_SHIP_DELETE_RIGGING}
  {HSE_SHIP_DELETE_GANGPLANK}
  {HSE_SHIP_DELETE_HELM}
) ({MASK}) {MASK_CENTER_X} {MASK_CENTER_Y} {MASK_RADIUS}}

[fire_event]
  name=hse_ship_placed
  [primary_unit]
    x=$unit_with_interior.x
    y=$unit_with_interior.y
  [/primary_unit]
[/fire_event]
#enddef

#define HSE_SHIP_PLACE_CANNON X Y
{GET_XY_FROM_MASK_XY cannon_x cannon_y unit_with_interior.variables.interior_space {X} {Y}}
[item]
  x=$cannon_x
  y=$cannon_y
  image=projectiles/stone.png
[/item]
{VARIABLE unit_with_interior.variables.cannon_x_list $unit_with_interior.variables.cannon_x_list|,$cannon_x}
{VARIABLE unit_with_interior.variables.cannon_y_list $unit_with_interior.variables.cannon_y_list|,$cannon_y}
{VARIABLE hex_contains_cannon_$cannon_x|_$cannon_y true}
#enddef
#define ENLARGE_STERN VAR
{VARIABLE {VAR}.variables.stern_can_be_enlarged false}
{VARIABLE_OP {VAR}.hitpoints add 30}
{VARIABLE_OP {VAR}.max_hitpoints add 30}
[set_variables]
  name=unit_with_interior
  to_variable={VAR}
[/set_variables]
{ADD_TO_INTERIOR_TERRAIN unit_with_interior.variables.interior_space $unit_with_interior.id {HSE_LARGE_STERN_GALLEON_MASK}}
{HSE_SHIP_PLACE_CANNON 3 3}
{HSE_SHIP_PLACE_CANNON 3 6}
[set_variables]
  name={VAR}
  to_variable=unit_with_interior
[/set_variables]
[unstore_unit]
  variable={VAR}
[/unstore_unit]
#enddef
#define HSE_SHIP_DELETE_CANNONS
[store_locations]
  x=$unit_with_interior.variables.cannon_x_list
  y=$unit_with_interior.variables.cannon_y_list
  variable=cannons
[/store_locations]
{FOREACH cannons i}
  [removeitem]
    x=$cannons[$i].x
    y=$cannons[$i].y
    image=projectiles/stone.png
  [/removeitem]
  {VARIABLE hex_contains_cannon_$cannons[$i|].x|_$cannons[$i|].y false}
{NEXT i}
#enddef

#define HSE_SHIP_PLACE_RIGGING X Y
{GET_XY_FROM_MASK_XY rigging_x rigging_y unit_with_interior.variables.interior_space {X} {Y}}
{VARIABLE unit_with_interior.variables.rigging_x_list $unit_with_interior.variables.rigging_x_list|,$rigging_x}
{VARIABLE unit_with_interior.variables.rigging_y_list $unit_with_interior.variables.rigging_y_list|,$rigging_y}
{VARIABLE hex_contains_rigging_$rigging_x|_$rigging_y true}
#enddef
#define HSE_SHIP_DELETE_RIGGING
[store_locations]
  x=$unit_with_interior.variables.rigging_x_list
  y=$unit_with_interior.variables.rigging_y_list
  variable=rigging
[/store_locations]
{FOREACH rigging i}
  {VARIABLE hex_contains_rigging_$rigging[$i|].x|_$rigging[$i|].y false}
{NEXT i}
#enddef

#define HSE_SHIP_PLACE_GANGPLANK X Y
{GET_XY_FROM_MASK_XY gangplank_x gangplank_y unit_with_interior.variables.interior_space {X} {Y}}
{VARIABLE unit_with_interior.variables.gangplank_x $gangplank_x}
{VARIABLE unit_with_interior.variables.gangplank_y $gangplank_y}
{VARIABLE hex_contains_gangplank_$gangplank_x|_$gangplank_y true}
#enddef
#define HSE_SHIP_DELETE_GANGPLANK
{VARIABLE hex_contains_gangplank_$unit_with_interior.variables.gangplank_x|_$unit_with_interior.variables.gangplank_y false}
#enddef

#define HSE_SHIP_PLACE_HELM X Y
{GET_XY_FROM_MASK_XY helm_x helm_y unit_with_interior.variables.interior_space {X} {Y}}
[item]
  x=$helm_x
  y=$helm_y
  image=scenery/leanto.png
[/item]
[label]
  x=$helm_x
  y=$helm_y
  text=$unit_with_interior.name
[/label]
{VARIABLE unit_with_interior.variables.helm_x $helm_x}
{VARIABLE unit_with_interior.variables.helm_y $helm_y}
{VARIABLE hex_contains_helm_$helm_x|_$helm_y true}
#enddef
#define HSE_SHIP_DELETE_HELM
[removeitem]
  x=$unit_with_interior.variables.helm_x
  y=$unit_with_interior.variables.helm_y
  image=scenery/leanto.png
[/removeitem]
[label]
  x=$unit_with_interior.variables.helm_x
  y=$unit_with_interior.variables.helm_y
  text=""
[/label]
{VARIABLE hex_contains_helm_$unit_with_interior.variables.helm_x|_$unit_with_interior.variables.helm_y false}
#enddef

#define HSE_SHIP_REFRESH_LABELS VAR
[label]
  x=${VAR}.variables.helm_x
  y=${VAR}.variables.helm_y
  text=${VAR}.name
[/label]
#enddef

#define PLACE_HSE_GALLEON_SHIP OTHER_ATTRIBUTES
{PLACE_HSE_SHIP 119 12 (type=Galleon
level=3
alignment=neutral
[+variables]
  is_hse_galleon=true
  stern_can_be_enlarged=true
[/variables]
{OTHER_ATTRIBUTES})
{HSE_GALLEON_MASK} 7 8 6
(
      {VARIABLE unit_with_interior.variables.cannon_x_list 0}
      {VARIABLE unit_with_interior.variables.cannon_y_list 0}
      {HSE_SHIP_PLACE_CANNON 5 3}
      {HSE_SHIP_PLACE_CANNON 7 3}
      {HSE_SHIP_PLACE_CANNON 9 3}
      {HSE_SHIP_PLACE_CANNON 11 3}
      {HSE_SHIP_PLACE_CANNON 5 6}
      {HSE_SHIP_PLACE_CANNON 7 6}
      {HSE_SHIP_PLACE_CANNON 9 6}
      {HSE_SHIP_PLACE_CANNON 11 6}

      {VARIABLE unit_with_interior.variables.rigging_x_list 0}
      {VARIABLE unit_with_interior.variables.rigging_y_list 0}
      {HSE_SHIP_PLACE_RIGGING 6 4}
      {HSE_SHIP_PLACE_RIGGING 8 4}
      {HSE_SHIP_PLACE_RIGGING 10 4}

      {HSE_SHIP_PLACE_GANGPLANK 10 2}
      {HSE_SHIP_PLACE_HELM 12 4}
)}
#enddef

#define PLACE_HSE_FRIGATE_SHIP OTHER_ATTRIBUTES
{PLACE_HSE_SHIP 50 8 (type=Transport Galleon
level=2
alignment=neutral
[+variables]
  is_hse_frigate=true
[/variables]
{OTHER_ATTRIBUTES})
{HSE_FRIGATE_MASK} 5 6 5
(
      {VARIABLE unit_with_interior.variables.cannon_x_list 0}
      {VARIABLE unit_with_interior.variables.cannon_y_list 0}
      {HSE_SHIP_PLACE_CANNON 3 3}
      {HSE_SHIP_PLACE_CANNON 5 3}
      {HSE_SHIP_PLACE_CANNON 7 3}
      {HSE_SHIP_PLACE_CANNON 3 5}
      {HSE_SHIP_PLACE_CANNON 5 5}
      {HSE_SHIP_PLACE_CANNON 7 5}

      {VARIABLE unit_with_interior.variables.rigging_x_list 0}
      {VARIABLE unit_with_interior.variables.rigging_y_list 0}
      {HSE_SHIP_PLACE_RIGGING 3 4}
      {HSE_SHIP_PLACE_RIGGING 5 4}
      {HSE_SHIP_PLACE_RIGGING 7 4}

      {HSE_SHIP_PLACE_GANGPLANK 6 2}
      {HSE_SHIP_PLACE_HELM 9 4}
)}
#enddef



#define PLACE_HSE_FLAGSHIP SIDE X Y
{VARIABLE side_var ({SIDE})}
{PLACE_HSE_GALLEON_SHIP (
side={SIDE}
x={X}
y={Y}
id="Flag Ship {SIDE}"
name=_"Flag Ship $side_var"
overlays=misc/hero-icon.png
)}
#enddef

#define HSE_PLACE_INITIAL_FLAGSHIP SIDE X Y
{PLACE_HSE_FLAGSHIP ({SIDE}) ({X}) ({Y})}
[store_unit]
  [filter]
    x=$unit_with_interior.x
    y=$unit_with_interior.y
  [/filter]
  variable=unit_with_interior
[/store_unit]
{VARIABLE unit_with_interior.variables.is_original_flagship true}

{GET_XY_FROM_MASK_XY galleon_crew_x galleon_crew_y unit_with_interior.variables.interior_space 7 4}
[unit]
  type=Ruffian
  side={SIDE}
  x=$galleon_crew_x
  y=$galleon_crew_y
[/unit]
{GET_XY_FROM_MASK_XY galleon_crew_x galleon_crew_y unit_with_interior.variables.interior_space 7 5}
[unit]
  type=Ruffian
  side={SIDE}
  x=$galleon_crew_x
  y=$galleon_crew_y
[/unit]
{GET_XY_FROM_MASK_XY galleon_crew_x galleon_crew_y unit_with_interior.variables.interior_space 9 4}
[unit]
  type=Ruffian
  side={SIDE}
  x=$galleon_crew_x
  y=$galleon_crew_y
[/unit]
{GET_XY_FROM_MASK_XY galleon_crew_x galleon_crew_y unit_with_interior.variables.interior_space 9 5}
[unit]
  type=Ruffian
  side={SIDE}
  x=$galleon_crew_x
  y=$galleon_crew_y
[/unit]

[unstore_unit]
  variable=unit_with_interior
[/unstore_unit]
#enddef

#define PLACE_HSE_FLAGSHIPS_ON_START
[event]
name=prestart
  [store_unit]
    [filter]
      canrecruit=yes
    [/filter]
    variable=leaders
  [/store_unit]
  {FOREACH leaders pfos_i}
    {HSE_FIND_CLOSEST_HEX flagship_x flagship_y $leaders[$pfos_i].x $leaders[$pfos_i].y terrain=Ww,Wo terrain={OBSTRUCTING_TERRAINS} 50}
    {HSE_PLACE_INITIAL_FLAGSHIP $leaders[$pfos_i].side $flagship_x $flagship_y}
  {NEXT pfos_i}
[/event]
#enddef

